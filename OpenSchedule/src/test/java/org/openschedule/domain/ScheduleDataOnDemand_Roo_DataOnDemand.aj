// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.openschedule.domain;

import java.util.List;
import java.util.Random;
import org.openschedule.domain.DayDataOnDemand;
import org.openschedule.domain.Schedule;
import org.openschedule.domain.TrackDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ScheduleDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ScheduleDataOnDemand: @Component;
    
    private Random ScheduleDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Schedule> ScheduleDataOnDemand.data;
    
    @Autowired
    private TrackDataOnDemand ScheduleDataOnDemand.trackDataOnDemand;
    
    @Autowired
    private DayDataOnDemand ScheduleDataOnDemand.dayDataOnDemand;
    
    public Schedule ScheduleDataOnDemand.getNewTransientSchedule(int index) {
        org.openschedule.domain.Schedule obj = new org.openschedule.domain.Schedule();
        obj.setBlocksPerSchedule(new Integer(index));
        obj.setTrack(trackDataOnDemand.getRandomTrack());
        obj.setDay(dayDataOnDemand.getRandomDay());
        return obj;
    }
    
    public Schedule ScheduleDataOnDemand.getSpecificSchedule(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Schedule obj = data.get(index);
        return Schedule.findSchedule(obj.getId());
    }
    
    public Schedule ScheduleDataOnDemand.getRandomSchedule() {
        init();
        Schedule obj = data.get(rnd.nextInt(data.size()));
        return Schedule.findSchedule(obj.getId());
    }
    
    public boolean ScheduleDataOnDemand.modifySchedule(Schedule obj) {
        return false;
    }
    
    public void ScheduleDataOnDemand.init() {
        data = org.openschedule.domain.Schedule.findScheduleEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Schedule' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<org.openschedule.domain.Schedule>();
        for (int i = 0; i < 10; i++) {
            org.openschedule.domain.Schedule obj = getNewTransientSchedule(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
