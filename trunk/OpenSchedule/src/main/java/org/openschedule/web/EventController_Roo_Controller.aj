// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.openschedule.web;

import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.util.Collection;
import org.openschedule.domain.Day;
import org.openschedule.domain.Event;
import org.openschedule.domain.EventComment;
import org.openschedule.domain.Label;
import org.openschedule.domain.Session;
import org.openschedule.domain.Speaker;
import org.openschedule.domain.Sponsor;
import org.openschedule.domain.Track;
import org.openschedule.domain.Venue;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect EventController_Roo_Controller {
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String EventController.createForm(Model model) {
        model.addAttribute("event", new Event());
        addDateTimeFormatPatterns(model);
        return "events/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String EventController.show(@PathVariable("id") Long id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("event", Event.findEvent(id));
        model.addAttribute("itemId", id);
        return "events/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String EventController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("events", Event.findEventEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Event.countEvents() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("events", Event.findAllEvents());
        }
        addDateTimeFormatPatterns(model);
        return "events/list";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String EventController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        Event.findEvent(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/events?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @RequestMapping(params = { "find=ByUsername", "form" }, method = RequestMethod.GET)
    public String EventController.findEventsByUsernameForm(Model model) {
        return "events/findEventsByUsername";
    }
    
    @RequestMapping(params = "find=ByUsername", method = RequestMethod.GET)
    public String EventController.findEventsByUsername(@RequestParam("username") String username, Model model) {
        model.addAttribute("events", Event.findEventsByUsername(username).getResultList());
        return "events/list";
    }
    
    @RequestMapping(params = { "find=ByShortName", "form" }, method = RequestMethod.GET)
    public String EventController.findEventsByShortNameForm(Model model) {
        return "events/findEventsByShortName";
    }
    
    @RequestMapping(params = "find=ByShortName", method = RequestMethod.GET)
    public String EventController.findEventsByShortName(@RequestParam("shortName") String shortName, Model model) {
        model.addAttribute("events", Event.findEventsByShortName(shortName).getResultList());
        return "events/list";
    }
    
    @ModelAttribute("days")
    public Collection<Day> EventController.populateDays() {
        return Day.findAllDays();
    }
    
    @ModelAttribute("eventcomments")
    public Collection<EventComment> EventController.populateEventComments() {
        return EventComment.findAllEventComments();
    }
    
    @ModelAttribute("labels")
    public Collection<Label> EventController.populateLabels() {
        return Label.findAllLabels();
    }
    
    @ModelAttribute("sessions")
    public Collection<Session> EventController.populateSessions() {
        return Session.findAllSessions();
    }
    
    @ModelAttribute("speakers")
    public Collection<Speaker> EventController.populateSpeakers() {
        return Speaker.findAllSpeakers();
    }
    
    @ModelAttribute("sponsors")
    public Collection<Sponsor> EventController.populateSponsors() {
        return Sponsor.findAllSponsors();
    }
    
    @ModelAttribute("tracks")
    public Collection<Track> EventController.populateTracks() {
        return Track.findAllTracks();
    }
    
    @ModelAttribute("venues")
    public Collection<Venue> EventController.populateVenues() {
        return Venue.findAllVenues();
    }
    
    void EventController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("event_startdate_date_format", "yyyy-MM-dd");
        model.addAttribute("event_enddate_date_format", "yyyy-MM-dd");
        model.addAttribute("event_publishdate_date_format", "yyyy-MM-dd");
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public Object EventController.showJson(@PathVariable("id") Long id) {
        Event event = Event.findEvent(id);
        if (event == null) {
            return new ResponseEntity<String>(HttpStatus.NOT_FOUND);
        }
        return event.toJson();
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public String EventController.listJson() {
        return Event.toJsonArray(Event.findAllEvents());
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> EventController.createFromJson(@RequestBody String json) {
        Event.fromJsonToEvent(json).persist();
        return new ResponseEntity<String>(HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> EventController.createFromJsonArray(@RequestBody String json) {
        for (Event event: Event.fromJsonArrayToEvents(json)) {
            event.persist();
        }
        return new ResponseEntity<String>(HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> EventController.updateFromJson(@RequestBody String json) {
        if (Event.fromJsonToEvent(json).merge() == null) {
            return new ResponseEntity<String>(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> EventController.updateFromJsonArray(@RequestBody String json) {
        for (Event event: Event.fromJsonArrayToEvents(json)) {
            if (event.merge() == null) {
                return new ResponseEntity<String>(HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> EventController.deleteFromJson(@PathVariable("id") Long id) {
        Event event = Event.findEvent(id);
        if (event == null) {
            return new ResponseEntity<String>(HttpStatus.NOT_FOUND);
        }
        event.remove();
        return new ResponseEntity<String>(HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByUsername", method = RequestMethod.GET, headers = "Accept=application/json")
    public String EventController.jsonFindEventsByUsername(@RequestParam("username") String username, Model model) {
        return Event.toJsonArray(Event.findEventsByUsername(username).getResultList());
    }
    
    @RequestMapping(params = "find=ByShortName", method = RequestMethod.GET, headers = "Accept=application/json")
    public String EventController.jsonFindEventsByShortName(@RequestParam("shortName") String shortName, Model model) {
        return Event.toJsonArray(Event.findEventsByShortName(shortName).getResultList());
    }
    
}
