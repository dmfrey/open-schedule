// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.openschedule.domain;

import java.util.List;
import java.util.Random;
import org.openschedule.domain.UserAccount;
import org.springframework.stereotype.Component;

privileged aspect UserAccountDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserAccountDataOnDemand: @Component;
    
    private Random UserAccountDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<UserAccount> UserAccountDataOnDemand.data;
    
    public UserAccount UserAccountDataOnDemand.getNewTransientUserAccount(int index) {
        org.openschedule.domain.UserAccount obj = new org.openschedule.domain.UserAccount();
        java.lang.String username = "username_" + index;
        if (username.length() > 255) {
            username  = username.substring(0, 255);
        }
        obj.setUsername(username);
        java.lang.String password = "password_" + index;
        if (password.length() > 255) {
            password  = password.substring(0, 255);
        }
        obj.setPassword(password);
        obj.setEnabled(true);
        obj.setAccountNonExpired(true);
        obj.setAccountNonLocked(true);
        obj.setCredentialsNonExpired(true);
        java.lang.String name = "name_" + index;
        if (name.length() > 255) {
            name  = name.substring(0, 255);
        }
        obj.setName(name);
        java.lang.String email = "email_" + index;
        if (email.length() > 255) {
            email  = email.substring(0, 255);
        }
        obj.setEmail(email);
        return obj;
    }
    
    public UserAccount UserAccountDataOnDemand.getSpecificUserAccount(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        UserAccount obj = data.get(index);
        return UserAccount.findUserAccount(obj.getId());
    }
    
    public UserAccount UserAccountDataOnDemand.getRandomUserAccount() {
        init();
        UserAccount obj = data.get(rnd.nextInt(data.size()));
        return UserAccount.findUserAccount(obj.getId());
    }
    
    public boolean UserAccountDataOnDemand.modifyUserAccount(UserAccount obj) {
        return false;
    }
    
    public void UserAccountDataOnDemand.init() {
        data = org.openschedule.domain.UserAccount.findUserAccountEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'UserAccount' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<org.openschedule.domain.UserAccount>();
        for (int i = 0; i < 10; i++) {
            org.openschedule.domain.UserAccount obj = getNewTransientUserAccount(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
