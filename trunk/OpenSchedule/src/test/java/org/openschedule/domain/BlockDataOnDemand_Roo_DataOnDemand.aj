// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.openschedule.domain;

import java.util.List;
import java.util.Random;
import org.openschedule.domain.Block;
import org.openschedule.domain.LabelDataOnDemand;
import org.openschedule.domain.SessionDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BlockDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BlockDataOnDemand: @Component;
    
    private Random BlockDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Block> BlockDataOnDemand.data;
    
    @Autowired
    private LabelDataOnDemand BlockDataOnDemand.labelDataOnDemand;
    
    @Autowired
    private SessionDataOnDemand BlockDataOnDemand.sessionDataOnDemand;
    
    public Block BlockDataOnDemand.getNewTransientBlock(int index) {
        org.openschedule.domain.Block obj = new org.openschedule.domain.Block();
        obj.setDate(new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime());
        obj.setDuration(new Integer(60));
        obj.setLabel(labelDataOnDemand.getRandomLabel());
        obj.setSession(sessionDataOnDemand.getRandomSession());
        return obj;
    }
    
    public Block BlockDataOnDemand.getSpecificBlock(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Block obj = data.get(index);
        return Block.findBlock(obj.getId());
    }
    
    public Block BlockDataOnDemand.getRandomBlock() {
        init();
        Block obj = data.get(rnd.nextInt(data.size()));
        return Block.findBlock(obj.getId());
    }
    
    public boolean BlockDataOnDemand.modifyBlock(Block obj) {
        return false;
    }
    
    public void BlockDataOnDemand.init() {
        data = org.openschedule.domain.Block.findBlockEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Block' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<org.openschedule.domain.Block>();
        for (int i = 0; i < 10; i++) {
            org.openschedule.domain.Block obj = getNewTransientBlock(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
