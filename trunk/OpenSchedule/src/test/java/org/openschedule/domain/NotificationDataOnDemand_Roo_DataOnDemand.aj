// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.openschedule.domain;

import java.util.List;
import java.util.Random;
import org.openschedule.domain.Notification;
import org.springframework.stereotype.Component;

privileged aspect NotificationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: NotificationDataOnDemand: @Component;
    
    private Random NotificationDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Notification> NotificationDataOnDemand.data;
    
    public Notification NotificationDataOnDemand.getNewTransientNotification(int index) {
        org.openschedule.domain.Notification obj = new org.openschedule.domain.Notification();
        java.lang.String statusTitle = "statusTitle_" + index;
        if (statusTitle.length() > 128) {
            statusTitle  = statusTitle.substring(0, 128);
        }
        obj.setStatusTitle(statusTitle);
        java.lang.String statusMessage = "statusMessage_" + index;
        if (statusMessage.length() > 255) {
            statusMessage  = statusMessage.substring(0, 255);
        }
        obj.setStatusMessage(statusMessage);
        java.lang.String title = "title_" + index;
        if (title.length() > 128) {
            title  = title.substring(0, 128);
        }
        obj.setTitle(title);
        java.lang.String message = "message_" + index;
        if (message.length() > 255) {
            message  = message.substring(0, 255);
        }
        obj.setMessage(message);
        obj.setCreated(new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime());
        obj.setDuration(new Integer(index));
        obj.setActive(Boolean.TRUE);
        return obj;
    }
    
    public Notification NotificationDataOnDemand.getSpecificNotification(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Notification obj = data.get(index);
        return Notification.findNotification(obj.getId());
    }
    
    public Notification NotificationDataOnDemand.getRandomNotification() {
        init();
        Notification obj = data.get(rnd.nextInt(data.size()));
        return Notification.findNotification(obj.getId());
    }
    
    public boolean NotificationDataOnDemand.modifyNotification(Notification obj) {
        return false;
    }
    
    public void NotificationDataOnDemand.init() {
        data = org.openschedule.domain.Notification.findNotificationEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Notification' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<org.openschedule.domain.Notification>();
        for (int i = 0; i < 10; i++) {
            org.openschedule.domain.Notification obj = getNewTransientNotification(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
